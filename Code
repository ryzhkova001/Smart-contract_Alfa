// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract AlphaBank {
    struct Account {
        address payable owner;
        uint balance;
    }
    
    mapping(address => Account) private accounts;
    address public bankOwner;
    
    event AccountCreated(address indexed owner);
    event Deposit(address indexed owner, uint amount);
    event Withdrawal(address indexed owner, uint amount);
    event Transfer(address indexed from, address indexed to, uint amount);

    modifier onlyBankOwner {
        require(msg.sender == bankOwner, "Only bank owner can execute this");
        _;
    }

    modifier validAccount(address owner) {
        require(accounts[owner].owner != address(0), "Account does not exist");
        _;
    }

    constructor() {
        bankOwner = msg.sender;
    }

    function createAccount() public {
        require(accounts[msg.sender].owner == address(0), "Account already exists");
        accounts[msg.sender] = Account(payable(msg.sender), 0);
        emit AccountCreated(msg.sender);
    }
    
    function deposit() public payable validAccount(msg.sender) {
        require(msg.value > 0, "Deposit amount must be greater than 0");
        accounts[msg.sender].balance += msg.value;
        emit Deposit(msg.sender, msg.value);
    }
    
    function withdraw(uint amount) public validAccount(msg.sender) {
        require(amount > 0, "Withdraw amount must be greater than 0");
        require(accounts[msg.sender].balance >= amount, "Insufficient balance");
        accounts[msg.sender].balance -= amount;
        payable(msg.sender).transfer(amount);
        emit Withdrawal(msg.sender, amount);
    }

    function transfer(address to, uint amount) public validAccount(msg.sender) validAccount(to) {
        require(amount > 0, "Transfer amount must be greater than 0");
        require(accounts[msg.sender].balance >= amount, "Insufficient balance");
        accounts[msg.sender].balance -= amount;
        accounts[to].balance += amount;
        emit Transfer(msg.sender, to, amount);
    }
    
    function getBalance(address owner) public view returns (uint) {
        return accounts[owner].balance;
    }
}
